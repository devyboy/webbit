{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","user","password","email","error","color","pass","_this2","auth","signInWithEmailAndPassword","then","result","current","currentUser","setState","message","_this3","createUserWithEmailAndPassword","signOut","window","location","reload","event","target","value","_this4","react_default","a","createElement","className","onClick","logOut","type","onChange","handleUserChange","bind","placeholder","handlePassChange","signIn","register","style","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c003410f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport firebase from \"firebase\";\n\nvar config = {\n    apiKey: \"AIzaSyC03mP6r5qEkEF_UA1eSw1pRPgQLW2nlEU\",\n    authDomain: \"websecrbac.firebaseapp.com\",\n    databaseURL: \"https://websecrbac.firebaseio.com\",\n    projectId: \"websecrbac\",\n    storageBucket: \"websecrbac.appspot.com\",\n    messagingSenderId: \"766124786977\"\n  };\n\nfirebase.initializeApp(config);\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: \"\",\n      password: \"\",\n      email: null,\n      error: \"\",\n      color: \"\",\n    }\n  }\n\n  signIn(user, pass) {\n    firebase.auth().signInWithEmailAndPassword(user, pass).then((result) => {\n      var current = firebase.auth().currentUser;\n      if (current) {\n        this.setState({ email: current.email })\n      }\n    }, (error) => {\n      this.setState({ error: error.message, color: \"red\" })\n    });\n  }\n\n  register(user, pass) {\n    firebase.auth().createUserWithEmailAndPassword(user, pass).then((result) => {\n      this.setState({ error: \"You've registered a new account and may now sign in with it.\", color: \"green\" });\n    }, (error) => {\n      this.setState({ error: error.message, color: \"red\" });\n    });\n  }\n\n  logOut() {\n    firebase.auth().signOut();\n    window.location.reload();\n  }\n\n  handleUserChange(event) {\n    this.setState({ user: event.target.value })\n  }\n\n  handlePassChange(event) {\n    this.setState({ password: event.target.value });\n  }\n\n  componentWillUnmount() {\n    firebase.auth().signOut();\n  }\n\n  componentDidMount() {\n    firebase.auth().signOut();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        {this.state.email\n          ?\n          <div>\n            <p> Welcome {this.state.email}! </p>\n            <div\n                className=\"button\"\n                onClick={() => this.logOut()}\n            >\n                Log Out\n            </div>\n          </div>\n          :\n          <div>\n          <p> Welcome to WebSec Reddit, if you have an account, please sign in. If not, please register one! </p>\n          <form className=\"form\">\n            <label>\n              <input type=\"email\" value={this.state.user} onChange={this.handleUserChange.bind(this)} placeholder=\"Email\"/>\n            </label>\n            <br/>\n            <label>\n              <input type=\"password\" value={this.state.password} onChange={this.handlePassChange.bind(this)} placeholder=\"Password\"/>\n            </label>\n          </form>\n          <div className=\"button-group\">\n            <div\n                className=\"button\"\n                onClick={() => this.signIn(this.state.user, this.state.password)}\n            >\n                Sign in\n            </div>\n            <div\n                className=\"button\"\n                onClick={() => this.register(this.state.user, this.state.password)}\n            >\n                Register\n            </div>\n          </div>\n          <p style={{ color: this.state.color }} className=\"error\">{this.state.error}</p>\n          </div>\n        }\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}